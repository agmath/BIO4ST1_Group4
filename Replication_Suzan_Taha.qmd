---
title: "Starter Notebook"
author: "Suzan Taha"
format: html
execute:
  keep-md: true
---

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data

```
## An Introduction To Replication
### Challenge 1
In this block of code we are developing our four nucleotides, Adenine, Guanine, Cytosine, and Thymine and then proceeding to print them out into our notebook.
```{r}
nucleotides <- c("A","G","C", "T")
nucleotides
```
### Challenge 2
In this challenge we are giving our string a set number, in this case 15 so that our outcome is a random list of our nucleotides that is of length 15.
```{r}
randString <- 15

randGenome <- sample(nucleotides, size = randString, replace = TRUE)

randGenome
```
### Challenge 3
We are about to create another random string of length 1500. This string however is going to be collapsed into one large line of nucleotides rather than having quotation marks between each character. 
```{r}
randString2 <- 1500
randGenome2 <- sample(nucleotides, size =randString2, replace = TRUE)
randGenome2


paste(randGenome2, collapse = "")
```
### Challenge 4
In challenge 4 we are setting a seed of 215 to allow my group members and I to obtain the same 100 values within our nucleotides. 
```{r}
set.seed(215)

randString3 <- 100
randGenome3 <- sample(nucleotides, size = randString3, replace = TRUE)
randGenome3

randGenome3 <- paste(randGenome3, collapse = "")

```
### Challenge 5
In the code block below, we are learning how to use a for loop of 1 which will allow us to portray all 'j' values from 1 to 15. This is useful when we want to use the same chunck of code over and over again.
```{r}
myProduct <- 1

for(j in 1:15){
  myProduct <- myProduct + j
  print(myProduct)
}
```
### Challenge 6
We are about to use a randome genome of length 10 and execute a for loop to determine each individual nucleotide that is present.
```{r}
genomeLength <- 10

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome

for(i in 1:10){
print(str_sub(randGenome, start=i, end= i))
}
```
### Challenge 7
We are about to use the same random genome as previously, however we are going to use a for loop and 'nchar' to give us the amount of Adenine's we have in our nucleotide as a number.
```{r}
randGenome
adeninecount <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    adeninecount <- adeninecount + 1
  }
}
print(adeninecount)
```
### Challenge 8
In challenge 8, we are going to us our same randome genome of length 10 to view how much of each base we have in our ten letter long nucleotide. 
```{r}
#Use this code chunk to complete Challenge 8
randGenome
adenine_count <- 0
cytosine_count <- 0
guanine_count <- 0
thymine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    adenine_count <- adenine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "C"){
    cytosine_count <- cytosine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "G"){
    guanine_count <- guanine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "T"){
    thymine_count <- thymine_count + 1
  }
}
print(c(adenine_count,thymine_count,guanine_count, cytosine_count))
```
### Challenge 9
We are about to read in a file that contains an extensive amount of nucleotides so that we can work with a bigger genome. Then we are going to program r to give us the exact number of each nucleotide - A, C, G, T
```{r}
#Use this code chunk to complete Challenge 9
vib_c <- scan("~/GITHUB/BioStatisticsAnalysis/longgenome.txt", what = "character", sep = NULL)

vib_c
adenine_count2 <- 0
cytosine_count2 <- 0
guanine_count2 <- 0
thymine_count2 <- 0
for(i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    adenine_count2 <- adenine_count2 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "C"){
    cytosine_count2 <- cytosine_count2 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "G"){
    guanine_count2 <- guanine_count2 + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "T"){
    thymine_count2 <- thymine_count2 + 1
  }
}
print(c(adenine_count2,thymine_count2,guanine_count2, cytosine_count2))
```
Doing this, gave us an adenine count of 587,884 a thymine count of 589,422 a guanine count of 512,048, and a cytosine count of 527,146. 
### Challenge 10
We are about to use the rosalind dna to obtain a challenge genome and then proceed to depict how many of each nucleotide (A, C, G, or T) is stated.
```{r}
rosalind_dna <- scan("~/Desktop/rosalind_dna.txt", what = "character", sep = NULL)
adenine_count3 <- 0
cytosine_count3 <- 0
guanine_count3 <- 0
thymine_count3 <- 0
for(i in 1:nchar(rosalind_dna)){
  if(str_sub(rosalind_dna, start = i, end = i) == "A"){
    adenine_count3 <- adenine_count3 + 1
  }
  if(str_sub(rosalind_dna, start = i, end = i) == "C"){
    cytosine_count3 <- cytosine_count3 + 1
  }
  if(str_sub(rosalind_dna, start = i, end = i) == "G"){
    guanine_count3 <- guanine_count3 + 1
  }
  if(str_sub(rosalind_dna, start = i, end = i) == "T"){
    thymine_count3 <- thymine_count3 + 1
  }
}
print(c(adenine_count3,thymine_count3,guanine_count3, cytosine_count3))
```
We obtained a count of 222 Adenine, 199 Thymine, 219 Guanine, and 241 Cytosine.
## DNA Replication Part 1
### Challenge 1
In challenge 1 we are creating a random genome of length 2000 and then counting the number of Cystosine's we have. To do this, we are using the `nucleotide frequency` function as well as the `paste` and `collapse` functions.
```{r}
genomeLength <- 2000

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

nucleotide_frequency <- function(genomeLength, nucleotides= "C"){
  count <- 0
  for(i in 1:nchar(genomeLength)){
    if(str_sub(genomeLength, start = i, end = i) == nucleotides){
     count <- count + 1
    }
  }
  return(count)
}
randGenome <- paste(randGenome, collapse = "")
nucleotide_frequency(randGenome, "C")
```
Our random genome of 2000 nucleotides gave us a cytosine count of 514 which will change everytime this code block is run. 
### Challenge 2
In challenge 2 we are going to create a random genome function that is associated with the value of k -- this will allow us to define k to be different numerical values. This code block should give us a single genome string of the length k we chose - in this example we used 5. 

```{r}
rand_Genome <- function(genomeString, nucleotides){
  nucleotides <- c("A","G","C","T")
  rand_Genome <- sample(nucleotides, size = genomeString, replace = TRUE)
  
rand_Genome <- paste(rand_Genome, collapse = "")
print(rand_Genome)}

rand_Genome(5, nucleotides)
```
### Challenge 3
Nucleotides are often read in groups of 3 and then changed into an amino acid. In challenge 3 we are creating a function called generate 3 mers to give us an output of every three nucleotides in our genome. 
```{r}
generate_3_mers <- function(genomeString) {
  list_3_mers <- c()
  for(i in 1:(nchar(genomeString) - 2)){
  list_3_mers <- list_3_mers %>%
  append(str_sub(genomeString, start = i, end = i + 2))
    }
  return(list_3_mers)
}

my_genome <- rand_Genome(5)
my_genome
generate_3_mers(my_genome)
```
### Challenge 4
Similarly to challenge 3, in challenge 4 we are creating a function to give us not every three nucleotides but every k nucleotides. This will be useful when we want subsections of more than 3 or even less than 3 nucleotides. It allows us to be more flexible and define k with any numerical value.  
```{r}
generate_k_mers <- function(genomeString, k) {
  list_k_mers <- c()
  for(i in 1:(nchar(genomeString) - (k-1))){
  list_k_mers <- list_k_mers %>%
  append(str_sub(genomeString, start = i, end = i+(k-1)))
    }
  return(list_k_mers)
}
  my_genome <- rand_Genome(10)
  my_genome
  generate_k_mers(my_genome,5)

```
### Challenge 5
In challenge 5, we are looking for patterns within our genome. To do this, we are creating a function that uses two arguments, our genome string and pattern. This will look at our genome and count how many repetitive patterns we have. For example, my_genome currently is AGAGT, if I look for the pattern 'AG' I should get a value of two.
```{r}
count_pattern <- function(genomeString, pattern){
  count <- 0
  k <- nchar(pattern)
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i+(k-1)) == pattern){
      count = count + 1
    }
  }
  return(count)
}
my_genome <- rand_Genome(10)
my_genome
count_pattern(my_genome, "CA")
```
### Challenge 6
In the final challenge, we are using a random genome string from rosalind to determine how many of our certain pattern is visible. The pattern we are looking for in the chunck of text is "TAGGAACTA" and after running the count pattern function that was created prior, we got a numerical value of 25. 
```{r}
data <- scan("~/Desktop/rosalind_ba1a.txt", what = character())

#The genomeString
genomeString <- data[1]
genomeString

#The value of k
pattern <- data[2]
pattern



count_pattern(genomeString, pattern)
```
## DNA Replication Part 2

### Challenge 1
Below we are practicing using the generate_k_mers function with a genome to obtain a list of several 3-mers. 
```{r} 
generate_k_mers("ACACAGACATCCCACCCC",3)

mystring <- c("T", "a", "h", "a")
for(i in 1:4){
  print(mystring[i])
}
```

```{r}
generate_frequent_kmers <- function(genomeString, k){
  #get the kmers
  kmers <- generate_k_mers(genomeString, k)
  kmers <- unique(kmers)
#count occurrences
  kmer_counts <- rep(0, length(kmers))
  for(i in 1:length(kmers)){
   kmers_counts[i] <- count_pattern(genomeString, kmers[i])
  }
max_freq <- max(kmer_counts)
freq_kmers <- kmers[kmercounts == max_freq]
return(freq_kmers)
}
```

### Challenge 2
Using rev() to give us the reverse complement 
```{r}
reverse_complement <- function(genomeSubString) {
  #reverse genomeSubstring
  splits <- strsplit(genomeSubString, "") [[1]]
  splits
  
  reversed_splits <- rev(splits)
  reversed_splits
  reverse_complement <- c()
  
  #Use if statements to construct complement of the reversed genomesubstring
  for(i in 1:length(reversed_splits)){
    if(reversed_splits[i] == "A"){
      reverse_complement <- append(reverse_complement, "T")
    }
    if(reversed_splits[i] == "T"){
      reverse_complement <- append(reverse_complement, "A")
    }
    if(reverse_complement[i] == "C"){
      reverse_complement <- append(reverse_complement, "G")
    }
    if(reeverse_complement[i] == "G"){
      reverse_complement <- append(reverse_complement, "C")
    }
  }
  return(reverse_complement())
}
#reverse_complement("ATTCGAA")
```

