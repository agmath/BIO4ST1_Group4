---
title: "Starter Notebook"
author: "You, Scientist"
format: html
execute:
  keep-md: true
---

```{r}
#Load in any packages you need
library(tidyverse)

#Read in any data

```

```{r}
instructors <- c("Duryea", "Gilbert")

instructors
```

Challenge 1: List of nucleotides

```{r}
nucleotides <- c("A", "G","C","T")
nucleotides
```

The code block combines the strings of the four nucleotides into the variable nucleotides and then prints it out.

Challenge 2: Random string of 15 nucleotides

```{r}
numNucleotide <- 15

randGenome <- sample(nucleotides, size = numNucleotide, replace = TRUE)

randGenome
```

A length of a genome is set at 15 with the variable numNucleotide. The variable randGenome is sampled (randomized) with the size of 15. Randgenome is printed out.

Challenge 3

```{r}
numNucleotide <- 1500

randGenome <- sample(nucleotides, size = numNucleotide, replace = TRUE)

randGenome <- paste(randGenome, collapse ="")

randGenome

```

The length of nucleotides is set at 1500. The only difference between this and challenge 2 is that string is collapsed to display a sequence of letters instead of the full names (adenosine, guanine, thymine, cytosine).

Challenge 4: Generate a random genome of 100 nucleotides and count adenosine

```{r}
set.seed(215)
numNucleotide <- 100

randGenome <- sample(nucleotides, size = numNucleotide, replace = TRUE)

randGenome <- paste(randGenome, collapse ="")

randGenome
```

Challenge 5:

```{r}
myProduct <- 1

for(j in 1:15){
  myProduct <- myProduct + j
  print(myProduct)
}


```

Creates a for loop where it runs through the variable j 15 times and whatever number it produces is added to myProduct

## Challenge 6

```{r}
#Use this code chunk to complete Challenge 6
genomeLength <- 20
randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)
randGenome <- paste(randGenome, collapse = "")
randGenome
  for(j in 1:10){
  print(str_sub(randGenome, start = j, end = j))
}

```

Setting the genome length to 20, we create a randomized sample based on the length and collapse the string to the letters A,G,C,T. We create a for loop for randGenome that is printed 10 times.

## Challenge 7

```{r}
randGenome
Adenine_count <- 0
for (i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
    print(Adenine_count)
}
}
```

Using the for loop from challenge six, we have the code look for the string "A" or adenine in the genome and add it to a variable called Adenine count. We then print out the final adenine count.

```{r}
randGenome
Adenine_count <- 0
Thymine_count <- 0
Guanine_count <- 0
Cytosine_count <- 0
for (i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
}
  if(str_sub(randGenome,start = i, end = i) == "G"){
      Guanine_count <- Guanine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
  if(str_sub(randGenome, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count+1
}
  print(c(Cytosine_count,Thymine_count,Guanine_count,Adenine_count))
  }      


```

The only options are AGCT. Nothing else is possible. We are already guaranteening we are covering all the conditions. If your can split the data into a dichotomy: else is otherwise instead of restrictive. This expands on challenge 7 but adds in a frequency for the other nucleotides as well. The final print statement combines all the variables together.

## Challenge 9

```{r}
vib_c <- scan("C:/Users/Joshua/OneDrive - SNHU/Desktop/Classes Spring 2023/Bioinformatics/VibrioCholerae.txt", what = "character", sep = NULL)
vib_c
Adenine_count <- 0
Thymine_count <- 0
Guanine_count <- 0
Cytosine_count <- 0
for (i in 1:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
}
  if(str_sub(vib_c,start = i, end = i) == "G"){
      Guanine_count <- Guanine_count + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
  if(str_sub(vib_c, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count+1
}
} 
print(c(Cytosine_count,Thymine_count,Guanine_count,Adenine_count))

```

Using the code from challenge 8, we import the genome of a cholera bacteria and produce an output that returns the frequency of the nucleotides.

## Challenge 10

```{r}
rosalind <- scan("C:/Users/Joshua/OneDrive - SNHU/Desktop/Classes Spring 2023/Bioinformatics/rosalind_dna.txt", what = "character", sep = NULL)
rosalind
Adenine_count <- 0
Thymine_count <- 0
Guanine_count <- 0
Cytosine_count <- 0
for (i in 1:nchar(rosalind)){
  if(str_sub(rosalind, start = i, end = i) == "A"){
    Adenine_count <- Adenine_count + 1
}
  if(str_sub(rosalind,start = i, end = i) == "G"){
      Guanine_count <- Guanine_count + 1
  }
  if(str_sub(rosalind, start = i, end = i) == "C"){
    Cytosine_count <- Cytosine_count + 1
  }
  if(str_sub(rosalind, start = i, end = i) == "T"){
    Thymine_count <- Thymine_count+1
}
} 
print(c(Cytosine_count,Thymine_count,Guanine_count,Adenine_count))
```
